from blob_scan import detect_weeds
from farmbot_status import get_current_position
# from grid_coords import generate_grid_positions                   √† remettre tr√®s vite, c'est juste pour un prototype
from grid_coords_test import generate_grid_positions
from send_laser import send_laser_sequence
from send_to_farmbot import send_weed_to_farmbot
from logger import init_logger  
from db_logger import log_image_metadata                               
from image_capture import save_image 
from plant_filter import filter_weeds_against_plants
from auth import get_headers
from movement import init_farmbot

import time
import os

# --- Param√®tres de la grille (ajust√©s au bac FarmBot Express 1.1) --- probablement inutiles car d√©j√† dans grid_coords.py mais √† v√©rifier plus tard
GRID_WIDTH = 6       # 1200 mm / 205 mm ‚âà 6
GRID_HEIGHT = 20     # 3000 mm / 151 mm ‚âà 20
STEP_X = 205         # Largeur r√©elle couverte par l'image
STEP_Y = 151         # Hauteur r√©elle couverte par l'image

ORIGIN_X = 0
ORIGIN_Y = 0
Z_HEIGHT = 0         # Hauteur fixe (√† ajuster si besoin)

DELAI_MOUVEMENT = 6.0 # D√©lai entre chaque mouvement (en secondes)
SIMULATION_MODE = True  # True = pas de mouvement r√©el, False = d√©placement r√©el

# --- Fonction principale ---
logger = init_logger()
headers = get_headers()
fb = init_farmbot()  

def scan_area():
    positions = generate_grid_positions()  # Coordonn√©es X, Y, Z √† scanner
    total = len(positions)
    logger.info(f"üîÅ D√©marrage du scan sur {total} positions...\n")

    # Initialisation de l'instance FarmBot
    fb = init_farmbot()

    for i, (x, y, z) in enumerate(positions):
        logger.info(f"üìç Position {i+1}/{total} : X={x} mm, Y={y} mm, Z={z} mm")

        if SIMULATION_MODE:
            logger.info("üß™ Mode simulation : aucun d√©placement r√©el")
        else:
            logger.debug("üö´ D√©placement d√©sactiv√© (move_to comment√© volontairement)")
            # move_to(x, y, z)  # d√©sactiv√© pour s√©curit√©/test hors FarmBot

        # Capture simul√©e d'image + d√©tection
        image, weeds = detect_weeds()
        logger.info(f"üîç {len(weeds)} mauvaise(s) herbe(s) d√©tect√©e(s)")

        # Filtrage des mauvaises herbes proches des plantes
        filtered_weeds = filter_weeds_against_plants(weeds, headers)
        logger.info(f"üßπ {len(filtered_weeds)} gard√©e(s) apr√®s filtrage par spread")

        # Sauvegarde image et log TOUJOURS, simulation ou r√©el
        prefix = "before_simu" if SIMULATION_MODE else "before"
        image_path = save_image(image, prefix=prefix, folder="images_archv/before")
        log_image_metadata(os.path.basename(image_path), prefix, x, y)
        logger.info(f"üíæ Image sauvegard√©e (avant) : {image_path}")

        # Simulation d'une image "apr√®s"
        image_after, _ = detect_weeds()
        prefix_after = "after_simu" if SIMULATION_MODE else "after"
        after_path = save_image(image_after, prefix=prefix_after, folder="images_archv/after")
        logger.info(f"üíæ Image sauvegard√©e (apr√®s) : {after_path}")
        log_image_metadata(os.path.basename(after_path), prefix_after, x, y)

        if not SIMULATION_MODE and filtered_weeds:
            for weed in filtered_weeds:
                try:
                    send_weed_to_farmbot(fb, weed["x"], weed["y"])
                    logger.info(f"üì§ Envoy√©e √† FarmBot √† ({weed['x']}, {weed['y']})")
                except Exception as e:
                    logger.error(f"‚ùå Erreur d‚Äôenvoi : {e}")

            # S√©quence laser
            send_laser_sequence()
            logger.info("‚úÖ S√©quence de laserification ex√©cut√©e")

            # Pause et recapture image apr√®s tir
            time.sleep(2)
            image_after, _ = detect_weeds()
            after_path = save_image(image_after, prefix="after", folder="images_archv/after")
            logger.info(f"üíæ Image sauvegard√©e (apr√®s) : {after_path}")

        #  D√©lai entre deux positions
        time.sleep(DELAI_MOUVEMENT)

    logger.info("üèÅ Scan termin√©.")


if __name__ == "__main__":
    scan_area()