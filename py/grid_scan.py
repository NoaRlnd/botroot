from blob_scan import detect_weeds
from farmbot_status import get_current_position
from movement import move_to, run_laserification_sequence
from grid_coords import generate_grid_positions
from send_laser import send_laser_sequence

import time

# --- Param√®tres de la grille (ajust√©s au bac FarmBot Express 1.1) ---
GRID_WIDTH = 6       # 1200 mm / 205 mm ‚âà 6
GRID_HEIGHT = 20     # 3000 mm / 151 mm ‚âà 20
STEP_X = 205         # Largeur r√©elle couverte par l'image
STEP_Y = 151         # Hauteur r√©elle couverte par l'image

ORIGIN_X = 0
ORIGIN_Y = 0
Z_HEIGHT = 0         # Hauteur fixe (√† ajuster si besoin)

DELAI_MOUVEMENT = 6.0 # D√©lai entre chaque mouvement (en secondes)
SIMULATION_MODE = True  # True = pas de mouvement r√©el, False = d√©placement r√©el

# --- Fonction principale ---
def scan_area():
    positions = generate_grid_positions() # G√©n√®re les coordon√©es de la grille √† scanner depuis grid_coords.py

    print(f"üîÅ D√©marrage du scan sur {len(positions)} positions...\n")

    for i, (x, y, z) in enumerate(positions):
        print(f"üìç Position {i+1}/{len(positions)} : X={x} mm, Y={y} mm, Z={z} mm")

        if SIMULATION_MODE:
            print("üß™ Mode simulation : aucun d√©placement r√©el")
        else:
            move_to(x, y, z)

        # D√©tection d'image simul√©e √† la position (x, y)
        image, weeds = detect_weeds()
        print(f"  -> {len(weeds)} mauvaise(s) herbe(s) d√©tect√©e(s) √† cette position\n")

        if len(weeds) > 0 and not SIMULATION_MODE:
            print("üì§ Envoi de la s√©quence de laserification...")
            send_laser_sequence()                                   # Envoie la s√©quence de laserification bien clean de send_laser.py
            print("‚úÖ S√©quence de laserification envoy√©e.")

        time.sleep(DELAI_MOUVEMENT)  # Pause entre les captures (pour simuler le temps de d√©placement)

    print("‚úÖ Scan termin√©.")

if __name__ == "__main__":
    scan_area()